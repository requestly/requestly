import { RequestMethod } from "features/apiClient/types";
import { isValidUrl } from "utils/FormattingHelper";

// import { useApiClientFeatureContext } from "features/apiClient/contexts/meta";
// import { RequestPreparationService } from "../requestPreparationService";
// import { getAppMode } from "store/selectors";
// import { useApiClientContext } from "features/apiClient/contexts";
// import { useSelector } from "react-redux";
// import { useContext, useMemo, useRef } from "react";
// import { AutogenerateStoreContext } from "features/apiClient/store/autogenerateContextProvider";
// import { renderVariables } from "backend/environment/utils";
// import { RequestValidationService } from "../requestValidationService";
// import { RequestExecutorService } from "../requestExecutorService";

export const isOnline = () => {
  return window.navigator.onLine === true;
};

export const isMethodSupported = (method: string) => {
  return Object.keys(RequestMethod).includes(method);
};

export const isUrlValid = (url: string) => {
  return isValidUrl(url);
};

export const isUrlProtocolValid = (url: string) => {
  try {
    const urlObj = new URL(url);
    if (urlObj.protocol !== "http:" && urlObj.protocol !== "https:") {
      return false;
    }
    return true;
  } catch {
    return false;
  }
};

// export const useHttpRequestExecutor = () => {
//   const ctx = useApiClientFeatureContext();
//   const appMode = useSelector(getAppMode);
//   const { apiClientWorkloadManager } = useApiClientContext();
//   const autoGeneratedStore = useContext(AutogenerateStoreContext);

//   const abortController = useRef(new AbortController());

//   return useMemo(() => {
//     const requestPreparationService = new RequestPreparationService(renderVariables, ctx, autoGeneratedStore);
//     const requestValidator = new RequestValidationService();

//     return new RequestExecutorService(
//       requestPreparationService,
//       requestValidator,
//       ctx,
//       apiClientWorkloadManager,
//       abortController.current,
//       () => {},
//       appMode
//     );
//   }, [apiClientWorkloadManager, appMode, autoGeneratedStore, ctx]);
// };
