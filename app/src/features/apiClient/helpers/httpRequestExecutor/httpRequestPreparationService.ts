import { StoreApi } from "zustand";
import {
  addUrlSchemeIfMissing,
  extractPathVariablesFromUrl,
  queryParamsToURLString,
  sanitizeEntry,
} from "../../screens/apiClient/utils";
import { ApiClientFeatureContext } from "../../store/apiClientFeatureContext/apiClientFeatureContext.store";
import { AutogeneratedFieldsStore } from "../../store/autogenerateStore";
import { RQAPI } from "../../types";
import { updateRequestWithAuthOptions } from "../auth";
import { cloneDeep } from "lodash";
import { renderVariables as renderVariablesType } from "backend/environment/utils";

export class HttpRequestPreparationService {
  constructor(
    private ctx: ApiClientFeatureContext,
    private autoGeneratedStore: StoreApi<AutogeneratedFieldsStore>,
    private renderVariables: typeof renderVariablesType
  ) {}

  private renderPathVariables(url: string, pathVariables: RQAPI.PathVariable[]): string {
    const variablesFromUrl = extractPathVariablesFromUrl(url);
    const variablesMap = new Map(pathVariables.map((variable) => [variable.key, variable]));

    let renderedUrl = url;

    variablesFromUrl.forEach((variableName) => {
      const variable = variablesMap.get(variableName);

      renderedUrl = renderedUrl.replace(new RegExp(`:${variableName}\\b`, "g"), variable.value);
    });

    return renderedUrl;
  }

  private prepareRequestUrl(entry: RQAPI.HttpApiEntry): string {
    const urlWithEnabledQueryParams = queryParamsToURLString(entry.request.queryParams, entry.request.url);
    const finalUrl = this.renderPathVariables(urlWithEnabledQueryParams, entry.request.pathVariables);
    return finalUrl;
  }

  prepareRequest(
    recordId: string,
    entry: RQAPI.HttpApiEntry
  ): {
    renderedVariables: any;
    preparedEntry: RQAPI.HttpApiEntry;
  } {
    const workingEntry = cloneDeep(sanitizeEntry(entry));

    workingEntry.testResults = [];
    workingEntry.request.url = this.prepareRequestUrl(workingEntry);
    workingEntry.request.queryParams = [];

    const { renderedVariables, result } = this.renderVariables(workingEntry, recordId, this.ctx);

    const renderedEntry = result;

    const { getAllHeaders, getAllQueryParams } = this.autoGeneratedStore.getState();
    const headers = getAllHeaders().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));
    const queryParams = getAllQueryParams().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));

    renderedEntry.request.headers = updateRequestWithAuthOptions(renderedEntry.request.headers, headers);
    renderedEntry.request.queryParams = updateRequestWithAuthOptions(renderedEntry.request.queryParams, queryParams);
    renderedEntry.request.url = addUrlSchemeIfMissing(renderedEntry.request.url);

    return {
      renderedVariables,
      preparedEntry: renderedEntry,
    };
  }
}
