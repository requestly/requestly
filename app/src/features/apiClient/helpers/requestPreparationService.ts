import { queryParamsToURLString } from "../screens/apiClient/utils";
import { RQAPI } from "../types";
import { updateRequestWithAuthOptions } from "./auth";

export class RequestPreparationService {
  constructor(
    private renderVariables: (
      entryDetails: RQAPI.HttpApiEntry,
      recordId: string,
      ctx: any
    ) => { renderedVariables: any; result: RQAPI.HttpApiEntry },
    private ctx: any,
    private autoGeneratedStore: {
      getState: () => {
        getAllHeaders: () => Array<{ key: string; value: string }>;
        getAllQueryParams: () => Array<{ key: string; value: string }>;
      };
    }
  ) {}

  prepareRequest(
    entryDetails: RQAPI.HttpApiEntry,
    recordId: string
  ): {
    renderedVariables: any;
    entryDetails: RQAPI.HttpApiEntry;
  } {
    entryDetails.testResults = [];
    entryDetails.request.url = queryParamsToURLString(entryDetails.request.queryParams, entryDetails.request.url);
    entryDetails.request.queryParams = [];

    const { renderedVariables, result } = this.renderVariables(entryDetails, recordId, this.ctx);

    entryDetails = result;

    const { getAllHeaders, getAllQueryParams } = this.autoGeneratedStore.getState();
    const headers = getAllHeaders().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));
    const queryParams = getAllQueryParams().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));

    entryDetails.request.headers = updateRequestWithAuthOptions(entryDetails.request.headers, headers);
    entryDetails.request.queryParams = updateRequestWithAuthOptions(entryDetails.request.queryParams, queryParams);

    return {
      renderedVariables,
      entryDetails,
    };
  }
}
