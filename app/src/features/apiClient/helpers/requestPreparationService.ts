import { StoreApi } from "zustand";
import { queryParamsToURLString } from "../screens/apiClient/utils";
import { ApiClientFeatureContext } from "../store/apiClientFeatureContext/apiClientFeatureContext.store";
import { AutogeneratedFieldsStore } from "../store/autogenerateStore";
import { RQAPI } from "../types";
import { updateRequestWithAuthOptions } from "./auth";

export class RequestPreparationService {
  constructor(
    private ctx: ApiClientFeatureContext,
    private autoGeneratedStore: StoreApi<AutogeneratedFieldsStore>,
    private renderVariables: Function
  ) {}

  prepareRequest(
    recordId: string,
    entry: RQAPI.HttpApiEntry
  ): {
    renderedVariables: any;
    preparedEntry: RQAPI.HttpApiEntry;
  } {
    entry.testResults = [];
    entry.request.url = queryParamsToURLString(entry.request.queryParams, entry.request.url);
    entry.request.queryParams = [];

    const { renderedVariables, result } = this.renderVariables(entry, recordId, this.ctx);

    entry = result;

    const { getAllHeaders, getAllQueryParams } = this.autoGeneratedStore.getState();
    const headers = getAllHeaders().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));
    const queryParams = getAllQueryParams().map((kv, index) => ({ ...kv, id: index, isEnabled: true }));

    entry.request.headers = updateRequestWithAuthOptions(entry.request.headers, headers);
    entry.request.queryParams = updateRequestWithAuthOptions(entry.request.queryParams, queryParams);

    return {
      renderedVariables,
      preparedEntry: entry,
    };
  }
}
