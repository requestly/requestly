import React, { useCallback, useMemo } from "react";
import { EnvironmentVariables } from "backend/environment/types";
import { KeyValuePair } from "features/apiClient/types";
import { KeyValueTable } from "../KeyValueTable/KeyValueTable";
import { useAutogenerateStore } from "features/apiClient/hooks/useAutogenerateStore";
import { AutoGeneratedTable } from "../KeyValueTable/AutoGeneratedTable";

interface HeadersTableProps {
  headers: KeyValuePair[];
  variables: EnvironmentVariables;
  onHeadersChange: (headers: KeyValuePair[]) => void;
}

export const HeadersTable: React.FC<HeadersTableProps> = ({ headers, variables, onHeadersChange }) => {
  const [headerVersion, getAllHeaders] = useAutogenerateStore((s) => [s.headerVersion, s.getAllHeaders]);

  const autogeneratedHeaders = useMemo(() => getAllHeaders(), [headerVersion, getAllHeaders]);

  const handleHeadersChange = useCallback(
    (updatedHeaders: KeyValuePair[]) => {
      onHeadersChange(updatedHeaders);
    },
    [onHeadersChange]
  );

  return (
    <div>
      {autogeneratedHeaders.length > 0 && <AutoGeneratedTable data={autogeneratedHeaders} type="headers" />}
      <KeyValueTable data={headers} variables={variables} onChange={handleHeadersChange} checkInvalidCharacter={true} />
    </div>
  );
};
