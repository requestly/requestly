import React, { useCallback } from "react";
import { EnvironmentVariables } from "backend/environment/types";
import { KeyValuePair } from "features/apiClient/types";
import { KeyValueTable } from "../KeyValueTable/KeyValueTable";
import { useQueryParamStore } from "features/apiClient/hooks/useQueryParamStore";
import { useAutogenerateStore } from "features/apiClient/hooks/useAutogenerateStore";
import { AutoGeneratedTable } from "../KeyValueTable/AutoGeneratedTable";

interface QueryParamsTableProps {
  variables: EnvironmentVariables;
  onQueryParamsChange: (queryParams: KeyValuePair[]) => void;
}

export const QueryParamsTable: React.FC<QueryParamsTableProps> = ({ variables, onQueryParamsChange }) => {
  const [queryParams, setQueryParams] = useQueryParamStore((state) => [state.queryParams, state.setQueryParams]);
  const [_, getAllQueryParams] = useAutogenerateStore((s) => [s.queryParamsVersion, s.getAllQueryParams]);

  const autogeneratedQueryParams = getAllQueryParams();
  const handleUpdateQueryParams = useCallback(
    (updatedPairs: KeyValuePair[]) => {
      setQueryParams(updatedPairs);
      onQueryParamsChange(updatedPairs);
    },
    [onQueryParamsChange, setQueryParams]
  );

  return (
    <div>
      {autogeneratedQueryParams.length > 0 && <AutoGeneratedTable data={autogeneratedQueryParams} type="queryParams" />}
      <KeyValueTable data={queryParams} variables={variables} onChange={handleUpdateQueryParams} />
    </div>
  );
};
