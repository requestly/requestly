import React, { useCallback } from "react";
import { useGraphQLRecordStore } from "features/apiClient/hooks/useGraphQLRecordStore";
import AuthorizationView from "../../../../../components/request/components/AuthorizationView";
import { resolveAuth } from "features/apiClient/screens/apiClient/utils";
import { useAPIRecords } from "features/apiClient/store/apiRecords/ApiRecordsContextProvider";
import {
  AutogeneratedFieldsNamespace,
  parseAuth,
  SimpleKeyValuePair,
} from "features/apiClient/store/autogenerateStore";
import { RQAPI } from "features/apiClient/types";
import { useAutogenerateStore } from "features/apiClient/hooks/useAutogenerateStore";
import { renderVariables } from "backend/environment/utils";
import { useApiClientFeatureContext } from "features/apiClient/contexts/meta";

interface Props {
  recordId: RQAPI.ApiRecord["id"];
  collectionId: RQAPI.ApiRecord["collectionId"];
}

export const GraphQLAuthView: React.FC<Props> = ({ recordId, collectionId }) => {
  const [auth, updateAuth] = useGraphQLRecordStore((state) => [state.entry.auth, state.updateEntryAuth]);
  const [getData, getParentChain] = useAPIRecords((state) => [state.getData, state.getParentChain]);
  const [purgeAndAdd] = useAutogenerateStore((state) => [state.purgeAndAdd, state.purgeAndAddHeaders]);
  const ctx = useApiClientFeatureContext();

  const resolver = useCallback(
    <T extends Record<string, any>>(template: T) => {
      return renderVariables(template, collectionId, ctx).result;
    },
    [collectionId, ctx]
  );

  const handleAuthUpdate = useCallback(
    (newAuth: RQAPI.Auth) => {
      const childDetails = {
        id: recordId,
        parentId: collectionId,
      };

      const resolvedAuth = resolveAuth(newAuth, childDetails, getParentChain, getData);
      const { headers, queryParams } = parseAuth(resolvedAuth, resolver);
      const headersContent = Object.fromEntries(headers);

      const queryParamsContent: SimpleKeyValuePair[] = [];
      queryParams.forEach(({ key, value }) => {
        queryParamsContent.push({ key, value });
      });
      purgeAndAdd(AutogeneratedFieldsNamespace.AUTH, headersContent, queryParamsContent);
      updateAuth(newAuth);
    },
    [purgeAndAdd, updateAuth, recordId, collectionId, getParentChain, getData, resolver]
  );

  return (
    <div className="graphql-request-tab-content" style={{ height: "inherit" }}>
      <AuthorizationView
        defaults={auth}
        onAuthUpdate={handleAuthUpdate}
        isRootLevelRecord={!collectionId}
        recordId={recordId}
      />
    </div>
  );
};
