import React, { useCallback, useMemo } from "react";
import { KeyValuePair } from "features/apiClient/types";
import { useAutogenerateStore } from "features/apiClient/hooks/useAutogenerateStore";
import { useScopedVariables } from "features/apiClient/helpers/variableResolver/variable-resolver";
import { KeyValueTable } from "../KeyValueTable/KeyValueTable";
import { AutoGeneratedTable } from "../KeyValueTable/AutoGeneratedTable";

interface HeadersTableProps {
  headers: KeyValuePair[];
  recordId: string;
  onHeadersChange: (headers: KeyValuePair[]) => void;
}

function Data(props: {
  recordId: string;
  headers: KeyValuePair[];
  handleHeadersChange: (updatedPairs: KeyValuePair[]) => void;
}) {
  const scopedVariables = useScopedVariables(props.recordId);
  return (
    <KeyValueTable
      data={props.headers}
      variables={scopedVariables}
      onChange={props.handleHeadersChange}
      checkInvalidCharacter={true}
      enableHeaderSuggestions={true}
    />
  );
}

export const HeadersTable: React.FC<HeadersTableProps> = ({ headers, recordId, onHeadersChange }) => {
  const [headerVersion, getAllHeaders] = useAutogenerateStore((s) => [s.headerVersion, s.getAllHeaders]);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const autogeneratedHeaders = useMemo(() => getAllHeaders(), [headerVersion, getAllHeaders]);

  const handleHeadersChange = useCallback(
    (updatedHeaders: KeyValuePair[]) => {
      onHeadersChange(updatedHeaders);
    },
    [onHeadersChange]
  );

  return (
    <div>
      {autogeneratedHeaders.length > 0 && <AutoGeneratedTable data={autogeneratedHeaders} type="headers" />}
      <Data headers={headers} recordId={recordId} handleHeadersChange={handleHeadersChange} />
    </div>
  );
};
