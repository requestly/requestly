import { useGraphQLRecordStore } from "features/apiClient/hooks/useGraphQLRecordStore";
import { RQAPI } from "features/apiClient/types";
import GraphQLClientUrl from "./components/GraphQLClientUrl/GraphQLClientUrl";
import React, { useCallback, useMemo, useRef, useState } from "react";
import useEnvironmentManager from "backend/environment/hooks/useEnvironmentManager";
import { RQButton } from "lib/design-system-v2/components";
import { useApiClientContext } from "features/apiClient/contexts";
import { toast } from "utils/Toast";
import { ApiClientExecutor } from "features/apiClient/helpers/apiClientExecutor/apiClientExecutor";
import { useSelector } from "react-redux";
// import { getAppMode } from "store/selectors";
// import { AutogenerateStoreContext } from "features/apiClient/store/autogenerateContextProvider";
// import { graphQLEntryToHttpEntryAdapter } from "./utils";
import { RBACButton, RevertViewModeChangesAlert, RoleBasedComponent } from "features/rbac";
import { Conditional } from "components/common/Conditional";
import { getUserAuthDetails } from "store/slices/global/user/selectors";
import { useHasUnsavedChanges } from "hooks";
import { Space } from "antd";
import { ApiClientBreadCrumb } from "../components/ApiClientBreadCrumb/ApiClientBreadCrumb";
import { ClientCodeButton } from "../components/ClientCodeButton/ClientCodeButton";
import { KEYBOARD_SHORTCUTS } from "../../../../../../../constants/keyboardShortcuts";
import { useGenericState } from "hooks/useGenericState";
import { BottomSheetLayout } from "componentsV2/BottomSheet";
import "./gqClientView.scss";
import { SheetLayout } from "componentsV2/BottomSheet/types";
import { GraphQLRequestTabs } from "./components/GraphQLRequestTabs/GraphQLRequestTabs";

interface Props {
  notifyApiRequestFinished: (entry: RQAPI.GraphQLApiEntry) => void;
  onSaveCallback: (apiEntryDetails: RQAPI.GraphQLApiRecord) => void;
  isCreateMode: boolean;
  openInModal?: boolean;
}

export const GraphQLClientView: React.FC<Props> = ({
  notifyApiRequestFinished,
  onSaveCallback,
  isCreateMode,
  openInModal = false,
}) => {
  const [
    url,
    collectionId,
    updateRecordRequest,
    updateRecord,
    getRecord,
    getRecordName,
  ] = useGraphQLRecordStore((state) => [
    state.record.data.request.url,
    state.record.collectionId,
    state.updateRecordRequest,
    state.updateRecord,
    state.getRecord,
    state.getRecordName,
  ]);

  const { getVariablesWithPrecedence } = useEnvironmentManager();

  const user = useSelector(getUserAuthDetails);

  const { hasUnsavedChanges } = useHasUnsavedChanges(getRecord().data);
  const { getIsActive } = useGenericState();

  const enableHotkey = getIsActive();

  const { apiClientRecordsRepository, onSaveRecord } = useApiClientContext();
  // const autoGeneratedStore = useContext(AutogenerateStoreContext);

  // const [isSending, setIsSending] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [apiClientExecutor] = useState<ApiClientExecutor | null>(null);

  const originalRecord = useRef(getRecord().data);

  const currentEnvironmentVariables = useMemo(() => getVariablesWithPrecedence(collectionId), [
    collectionId,
    getVariablesWithPrecedence,
  ]);

  const handleUrlChange = useCallback(
    (value: string) => {
      updateRecordRequest({
        url: value,
      });
    },
    [updateRecordRequest]
  );

  const handleUrlInputEnterPressed = useCallback((evt: KeyboardEvent) => {
    (evt.target as HTMLInputElement).blur();
  }, []);

  const handleSave = useCallback(async () => {
    const apiRecord = getRecord();

    const recordToSave: Partial<RQAPI.ApiRecord> = {
      type: RQAPI.RecordType.API,
      data: {
        ...apiRecord.data,
      },
    };
    if (isCreateMode) {
      const requestId = apiClientRecordsRepository.generateApiRecordId();
      recordToSave.id = requestId;
    }

    if (apiRecord?.id) {
      recordToSave.id = apiRecord?.id;
    }
    setIsSaving(true);
    const result = isCreateMode
      ? await apiClientRecordsRepository.createRecordWithId(recordToSave, recordToSave.id)
      : await apiClientRecordsRepository.updateRecord(recordToSave, recordToSave.id);

    if (result.success && result.data.type === RQAPI.RecordType.API) {
      onSaveRecord({ ...(apiRecord ?? {}), ...result.data, data: { ...result.data.data, ...recordToSave.data } });
      onSaveCallback(result.data as RQAPI.GraphQLApiRecord);
      toast.success("Request saved!");
    } else {
      toast.error("Something went wrong while saving the request");
    }
    setIsSaving(false);
  }, [onSaveCallback, getRecord, isCreateMode, apiClientRecordsRepository, onSaveRecord]);

  // const handleSend = useCallback(async () => {
  //   const record = getRecord();

  //   apiClientExecutor.updateEntryDetails({
  //     entry: graphQLEntryToHttpEntryAdapter(record.data),
  //     recordId: record.id,
  //     collectionId: record.collectionId,
  //   });
  //   try {
  //     setIsSending(true);
  //     const apiClientExecutionResult = await apiClientExecutor.execute();

  //     const { executedEntry } = apiClientExecutionResult;
  //     const entryWithResponse: RQAPI.GraphQLApiEntry = {
  //       ...record.data,
  //       response: executedEntry.response as RQAPI.GraphQLResponse,
  //       testResults: executedEntry.testResults,
  //     };
  //     console.log({ entryWithResponse });
  //     updateRecordResponse(entryWithResponse.response);

  //     toast.success("Request executed successfully");
  //   } catch (error) {
  //     toast.error("Something went wrong while sending the request");
  //   } finally {
  //     setIsSending(false);
  //   }
  // }, [apiClientExecutor, getRecord, updateRecordResponse]);

  // const handleUpdatesFromExecutionWorker = useCallback(
  //   async (state: any) => {
  //     for (const key in state) {
  //       if (key === "environment") {
  //         const currentEnvironment = getCurrentEnvironment() as {
  //           currentEnvironmentName?: string;
  //           currentEnvironmentId?: string;
  //         };
  //         if (currentEnvironment.currentEnvironmentId) {
  //           await setVariables(currentEnvironment.currentEnvironmentId, state[key]);
  //         }
  //       }
  //       if (key === "global") {
  //         const globalEnvId = environmentSyncRepository.getGlobalEnvironmentId();
  //         await setVariables(globalEnvId, state[key]);
  //       }
  //       if (key === "collectionVariables") {
  //         await setCollectionVariables(state[key], collectionId);
  //       }
  //     }
  //   },
  //   [getCurrentEnvironment, setVariables, setCollectionVariables, collectionId, environmentSyncRepository]
  // );

  // useEffect(() => {
  //   if (apiClientExecutor) {
  //     apiClientExecutor.updateInternalFunctions({
  //       getCollectionVariables,
  //       getEnvironmentVariables: getCurrentEnvironmentVariables,
  //       getGlobalVariables,
  //       postScriptExecutionCallback: handleUpdatesFromExecutionWorker,
  //       renderVariables,
  //     });
  //   }
  // }, [
  //   getCurrentEnvironmentVariables,
  //   getCollectionVariables,
  //   getGlobalVariables,
  //   handleUpdatesFromExecutionWorker,
  //   apiClientExecutor,
  //   renderVariables,
  // ]);

  // useEffect(() => {
  //   if (!apiClientExecutor) {
  //     setApiClientExecutor(new ApiClientExecutor(appMode, apiClientWorkloadManager, autoGeneratedStore));
  //   }
  // }, [apiClientWorkloadManager, appMode, apiClientExecutor, autoGeneratedStore]);

  const handleRevertChanges = () => {
    updateRecord(originalRecord.current);
  };

  return (
    <div className="api-client-view gql-client-view">
      <div className="api-client-header-container">
        <RoleBasedComponent
          permission="create"
          resource="api_client_request"
          fallback={
            <Conditional condition={user.loggedIn && !openInModal && hasUnsavedChanges}>
              <RevertViewModeChangesAlert
                title="As a viewer, You can modify and test APIs, but cannot save updates."
                callback={handleRevertChanges}
              />
            </Conditional>
          }
        />
        <div className="api-client-header-container__header">
          <div className="api-client-breadcrumb-container">
            <ApiClientBreadCrumb
              openInModal={openInModal}
              name={getRecordName()}
              OnRecordNameUpdate={() => {}}
              onBlur={() => {}}
            />

            <ClientCodeButton apiClientExecutor={apiClientExecutor} />
          </div>

          <div className="api-client-header__url">
            <Space.Compact className="api-client-url-container">
              <GraphQLClientUrl
                url={url}
                currentEnvironmentVariables={currentEnvironmentVariables}
                onEnterPress={handleUrlInputEnterPressed}
                onUrlChange={handleUrlChange}
              />
            </Space.Compact>
            <RQButton
              showHotKeyText
              onClick={() => {}}
              hotKey={KEYBOARD_SHORTCUTS.API_CLIENT.SEND_REQUEST.hotKey}
              type="primary"
              className="text-bold"
              disabled={!url}
            >
              Send
            </RQButton>

            <Conditional condition={!openInModal}>
              <RBACButton
                disabled={!hasUnsavedChanges}
                permission="create"
                resource="api_client_request"
                showHotKeyText
                hotKey={KEYBOARD_SHORTCUTS.API_CLIENT.SAVE_REQUEST.hotKey}
                onClick={handleSave}
                loading={isSaving}
                tooltipTitle="Saving is not allowed in view-only mode. You can update and view changes but cannot save them."
                enableHotKey={enableHotkey}
              >
                Save
              </RBACButton>
            </Conditional>
          </div>
        </div>
      </div>
      <BottomSheetLayout layout={SheetLayout.SPLIT} bottomSheet={<div>Bottom Sheet</div>}>
        <div className="api-client-body">
          <GraphQLRequestTabs requestId={getRecord().id} />
        </div>
      </BottomSheetLayout>
    </div>
  );
};
