import { getAppMode } from "store/selectors";
import { useApiClientFeatureContext } from "../contexts/meta";
import { useSelector } from "react-redux";
import { useApiClientContext } from "../contexts";
import { AutogenerateStoreContext } from "../store/autogenerateContextProvider";
import { useContext, useMemo, useRef } from "react";
import { RequestPreparationService } from "../helpers/requestPreparationService";
import { RequestValidationService } from "../helpers/requestValidationService";
import { ScriptExecutionService } from "../helpers/scriptExecutionService";
import { RequestExecutorService } from "../helpers/requestExecutorService";
import { renderVariables } from "backend/environment/utils";

export const useHttpRequestExecutor = () => {
  const ctx = useApiClientFeatureContext();
  const appMode = useSelector(getAppMode);
  const { apiClientWorkloadManager } = useApiClientContext();
  const autoGeneratedStore = useContext(AutogenerateStoreContext);

  const abortControllerRef = useRef(new AbortController());

  return useMemo(() => {
    const requestPreparer = new RequestPreparationService(renderVariables, ctx, autoGeneratedStore);
    const requestValidator = new RequestValidationService();
    const scriptExecutor = new ScriptExecutionService(ctx, apiClientWorkloadManager, abortControllerRef.current);

    return new RequestExecutorService(
      requestPreparer,
      requestValidator,
      scriptExecutor,
      abortControllerRef.current,
      () => {},
      appMode
    );
  }, [apiClientWorkloadManager, appMode, autoGeneratedStore, ctx]);
};
